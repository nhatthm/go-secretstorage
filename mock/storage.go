// Code generated by mockery v2.53.2. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// Storage is an autogenerated mock type for the Storage type
type Storage[V interface{}] struct {
	mock.Mock
}

// Delete provides a mock function with given fields: service, key
func (_m *Storage[V]) Delete(service string, key string) error {
	ret := _m.Called(service, key)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(service, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: service, key
func (_m *Storage[V]) Get(service string, key string) (V, error) {
	ret := _m.Called(service, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 V
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (V, error)); ok {
		return rf(service, key)
	}
	if rf, ok := ret.Get(0).(func(string, string) V); ok {
		r0 = rf(service, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(V)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(service, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: service, key, value
func (_m *Storage[V]) Set(service string, key string, value V) error {
	ret := _m.Called(service, key, value)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, V) error); ok {
		r0 = rf(service, key, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage[V interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage[V] {
	mock := &Storage[V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
